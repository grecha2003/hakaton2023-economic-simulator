import * as dotenv from 'dotenv'
dotenv.config()
import { Telegraf } from 'telegraf';
import { message } from 'telegraf/filters';
import { Markup } from 'telegraf';
import { session } from 'telegraf';
import { MySQL } from "@telegraf/session/mysql";
import * as db from './database.js';


const bot = new Telegraf(process.env.BOT_TOKEN);

const pool = db.pool
const store = MySQL({ 
  database: 'game',
  host: 'localhost',
  user: 'user',
  password: 'ilya333',
  table: 'sessions'
})

// bot.use(session({ store }));
bot.use(session( { store: store, defaultSession: () => ({}) }));

bot.command('toplist', async ctx => {
  var top = await db.getTop15()
  let text = ''
  let i = 1;
  for (let user of top) {
    text += `${i}. ${user.balance} - ${user.name}\n`
    i += 1
  }
  ctx.reply('–¢–æ–ø 15 –∏–≥—Ä–æ–∫–æ–≤ –∑–∞ –≤—Å—ë –≤—Ä–µ–º—è:\n' +text)
})

bot.command('buybiz', async ctx => {
  let args = ctx.message.text.split(' ')
  let id = parseInt(args[1])
  if (isNaN(id)) {
    ctx.reply('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buybiz <id –±–∏–∑–Ω–µ—Å–∞>')
    return
  }
  let business = await db.getBusiness(id)
  let vars = db.BUSINESS_TYPES[business.type]
  if (!business) {
    ctx.reply('–î–∞–Ω–Ω–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç üò¢')
  } else if (business.owner) {
    if (business.owner != ctx.from.id) {
      ctx.reply('–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–∑–Ω–µ—Å, –∫–æ—Ç–æ—Ä—ã–º –≤–ª–∞–¥–µ–µ—Ç –¥—Ä—É–≥–æ–π —á–µ–ª–æ–≤–µ–∫')
    } else {
      ctx.reply('–í—ã —É–∂–µ –≤–ª–∞–¥–µ–µ—Ç–µ —ç—Ç–∏–º –±–∏–∑–Ω–µ—Å–æ–º.')
    }
  } else if (!business.owner) {
    if (await db.removeMoney(ctx.from.id, vars.price)) {
      business.owner = ctx.from.id
      await db.updateBusiness(business)
      ctx.reply(`–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º üéâ\n–í—ã –∫—É–ø–∏–ª–∏ –±–∏–∑–Ω–µ—Å ${vars.friendlyName} –∑–∞ ${vars.price}`)
    } else {
      ctx.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —ç—Ç–æ—Ç –±–∏–∑–Ω–µ—Å.')
    }
  }
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
bot.start(async (ctx) => {
  const userid = ctx.from.id;
  let user = await db.getUser(userid)
  if (user == undefined) {
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É!', Markup
      .keyboard([
        ['–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è']
      ]).resize())
  } else {
    ctx.session.state = ''
    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup
      .keyboard([
        ['–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', '–ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã'],
        ['–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å', '–ü–ª–æ—â–∞–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∏'],
        ['–ù–∞—Å—Ç—Ä–æ–π–∫–∏', '–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤']
      ])
      .resize()
    );
  }
});

bot.hears('–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è', async (ctx) => {
  console.log(ctx.session)
  ctx.session.state = 'wait_for_name'
  await ctx.reply('–°–∫–∞–∂–∏—Ç–µ, –∫–∞–∫ –≤–∞—Å –Ω–∞–∑—ã–≤–∞—Ç—å? (–±–µ–∑ –ø—Ä–æ–±–µ–ª–æ–≤)')
})

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å"
bot.hears('–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å', async (ctx) => {
  // ctx.reply('–í—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–≤–æ–µ–π –ø—Ä–∏–±—ã–ª–∏ –∑–¥–µ—Å—å.');
  let result = await db.tickGame(ctx.from.id)
  if (result.nobusiness) {
    await ctx.reply('–í—ã –Ω–µ –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –Ω–∏ —Å –∫–∞–∫–∏—Ö –±–∏–∑–Ω–µ—Å–æ–≤!')
  } else if (result.didClaim) {
    await ctx.reply(`–°–µ–≥–æ–¥–Ω—è –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${result.profitSum}!`)
  } else {
    await ctx.reply('–í—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª–∏ —Å–µ–≥–æ–¥–Ω—è –ø—Ä–∏–±—ã–ª—å, –∑–∞–≤—Ç—Ä–∞ –æ–Ω–∞ –ø–æ—è–≤–∏—Ç—Å—è!')
  }
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã"
bot.hears('–ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã', async (ctx) => {
  let business = await db.listBusiness(ctx.from.id)
  ctx.session.businessCount = business.length
  var keys = []
  console.log(business)
  if (business != undefined) {
    for (let bus of business) {
      const bustype = db.BUSINESS_TYPES[bus.type]
      keys.push([{
        text: `${bus.type} –£—Ä.${bus.upgrades} - ${bus.employees}/${bustype.maxEmployeeCount}`,
        callback_data: `${bus.id}`
      }])
    }
  }
  await ctx.reply(`–í–∞—à–∏ –±–∏–∑–Ω–µ—Å—ã: ${business?.length}`, Markup.inlineKeyboard(
    keys
  ))
  ctx.session.state = 'list_business'
});

async function editBusinessDataFromContext(ctx) {
  let business = await db.getBusiness(ctx.session.business_id)
  let vars = db.BUSINESS_TYPES[business.type]
  let text = `–ë–∏–∑–Ω–µ—Å ${vars.friendlyName} üíπ
–°—Ç–∞—Ç—É—Å: ${db.CATEGORIES[vars.category]}
–£—Ä–æ–≤–µ–Ω—å: ${db.upgrades}
–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${vars.profitPerEmployee * business.employees * vars.equipmentMultiplier[business.upgrades - 1]}
–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${business.employees}/${vars.maxEmployeeCount}`
  
  let keys = [
    [
      {text: '–£–ª—É—á—à–∏—Ç—å ($123)', callback_data: 'action_upgrade'},
      {text: '–ù–∞–Ω—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ ($100)', callback_data: 'action_hire'}
    ],
    [
      {text: '–ü—Ä–æ–¥–∞—Ç—å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É (50%)', callback_data: 'action_sell_to_state'},
      {text: '–ü—Ä–æ–¥–∞—Ç—å –∏–≥—Ä–æ–∫—É', callback_data: 'action_sell_to_user'}
    ]
  ]

  await ctx.editMessageText(text, Markup.inlineKeyboard(keys).resize())
}

bot.on('callback_query', async (ctx) => {
  var msg = ctx.message;
  
  if (ctx.callbackQuery.data == 'accept_trade') {
    let trades = await db.getTrades()
    for (let trade of trades) {
      if (trade.buyer == ctx.callbackQuery.from.id) {
        console.log(trade)
        if (await db.removeMoney(ctx.callbackQuery.from.id, trade.price)) {
          await ctx.reply(`–¢–µ–ø–µ—Ä—å –≤—ã –≤–ª–∞–¥–µ–ª–µ—Ü –Ω–æ–≤–æ–≥–æ –±–∏–∑–Ω–µ—Å–∞ –∑–∞ —Å–∫—Ä–æ–º–Ω—É—é —Ü–µ–Ω—É –≤ ${trade.price}!`)
          let business = await db.getBusiness(trade.business_id)
          business.owner = trade.buyer
          await db.updateBusiness(business)

          let seller = await db.getUser(trade.seller)
          seller.balance += trade.price
          await db.updateUser(seller)
          await bot.telegram.sendMessage(trade.seller, `–°–¥–µ–ª–∫–∞ —Å–æ—Å—Ç–æ—è–ª–∞—Å—å! –í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ ${trade.price}`)
        } else {
          await ctx.reply('–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥, —Å–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å.')
          await bot.telegram.sendMessage(trade.seller, `–°–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å! –£ –¥—Ä—É–≥–æ–π —Å—Ç–æ—Ä–æ–Ω—ã –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥.`)
        }
        await db.removeTrade(trade.id)
        return
      }
    }
    return
  } else if (ctx.callbackQuery.data == 'decline_trade') {
    let trades = await db.getTrades()
    for (let trade of trades) {
      if (trade.buyer == ctx.callbackQuery.from.id) {
        await db.removeTrade(trade.id)
        await ctx.reply('–í—ã –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–¥–µ–ª–∫–∏.')
        await bot.telegram.sendMessage(trade.seller, `–°–¥–µ–ª–∫–∞ —Å–æ—Ä–≤–∞–ª–∞—Å—å! –î—Ä—É–≥–∞—è —Å—Ç–æ—Ä–æ–Ω–∞ –æ—Ç–∫–∞–∑–∞–ª–∞—Å—å.`)
        return
      }
    }
    return
  }

  if (ctx.session.state == 'list_business') {
    let business_id = ctx.callbackQuery.data
    ctx.session.state = 'business_detail'
    ctx.session.business_id = business_id
    
    await editBusinessDataFromContext(ctx)
  }

  if (ctx.session.state == 'business_detail') {
    let user = await db.getUser(ctx.from.id)
    console.log(ctx.session)
    let business = await db.getBusiness(ctx.session.business_id)
    let vars = db.BUSINESS_TYPES[business.type]
    if (ctx.callbackQuery.data == 'action_upgrade') {
      if (business.upgrades >= 3) {
        ctx.reply('–£ –≤–∞—Å –∏ —Ç–∞–∫ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ')
      } else {
        if (db.removeMoney(ctx.from.id, 123)) {
          business.upgrades += 1
          await db.updateBusiness(business)
          ctx.reply(`–ë–∏–∑–Ω–µ—Å —Ç–µ–ø–µ—Ä—å —É–ª—É—á—à–µ–Ω –Ω–∞ ${business.upgrades}/3!`)
        } else {
          ctx.reply('–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã —É–ª—É—á—à–∏—Ç—å –±–∏–∑–Ω–µ—Å.')
        }
      }
    } else if (ctx.callbackQuery.data == 'action_hire') {
      if (business.employees >= vars.maxEmployeeCount) {
        ctx.reply('–í –≤–∞—à–µ–º –±–∏–∑–Ω–µ—Å–µ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.')
      } else {
        if (await db.removeMoney(ctx.from.id, 100)) {
          business.employees += 1
          await db.updateBusiness(business)
          await editBusinessDataFromContext(ctx)
          ctx.reply(`–í—ã –Ω–∞–Ω—è–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞! –¢–µ–ø–µ—Ä—å –∏—Ö ${business.employees}/${vars.maxEmployeeCount}.`)
        } else {
          ctx.reply('–í–∞–º –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –¥–µ–Ω–µ–≥, —á—Ç–æ–±—ã –Ω–∞–Ω—è—Ç—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.')
        }
      }
    } else if (ctx.callbackQuery.data == 'action_sell_to_state') {
      user.balance += (vars.price * 0.5)
      await db.updateUser(user)
      business.owner = null
      await db.updateBusiness(business)
      ctx.deleteMessage(ctx.callbackQuery.message.id)
      ctx.reply('–í—ã –ø—Ä–æ–¥–∞–ª–∏ –±–∏–∑–Ω–µ—Å –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É, –±–æ–ª—å—à–µ –æ–Ω –≤–∞–º –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç')
      ctx.session.state = ''
    } else if (ctx.callbackQuery.data == 'action_sell_to_user') {
      ctx.session.state = 'sell_to_user_price'
      ctx.reply('–ó–∞ —Å–∫–æ–ª—å–∫–æ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å —Å–≤–æ–π –±–∏–∑–Ω–µ—Å?')
    }
  }

  await ctx.answerCbQuery()
})

bot.hears('–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å', async (ctx) => {
  let user = await db.getUser(ctx.from.id)
  let businesses = await db.listBusiness(user.tgid)
  let incomeday = user.lastIncomeDay ? user.lastIncomeDay.toDateString() : '–Ω–∏–∫–æ–≥–¥–∞'
  ctx.reply(`–ü—Ä–æ—Ñ–∏–ª—å ${user.name} üíº
–ë–∞–ª–∞–Ω—Å: ${user.balance}
–î–µ–Ω—å —Å–±–æ—Ä–∞: ${incomeday}
–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–∏–∑–Ω–µ—Å–æ–≤: ${businesses.length}`);
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤"
bot.hears('–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', (ctx) => {
  ctx.reply('–ó–∞–ª–µ—Ç–∞–π—Ç–µ –≤ –Ω–∞—à —á–∞—Ç –∏ –æ–±–º–µ–Ω–∏–≤–∞–π—Ç–µ—Å—å –±–∏–∑–Ω–µ—Å–∞–º–∏ —Å –¥—Ä—É–≥–∏–º–∏ –ª—é–¥—å–º–∏! ü§ë', Markup.inlineKeyboard([
    Markup.button.url('–ü–µ—Ä–µ–π—Ç–∏ –≤ —á–∞—Ç', 'https://t.me/+tcgVdSKiygY0Njky')
  ]));
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
bot.hears('–ù–∞—Å—Ç—Ä–æ–π–∫–∏', (ctx) => {
  ctx.reply('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è.');
});

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–ª–æ—â–∞–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∏"
bot.hears('–ü–ª–æ—â–∞–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∏', (ctx) => {
  ctx.reply('–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –ø–ª–æ—â–∞–¥–∫–µ –ø—Ä–æ–¥–∞–∂–∏/–ø–æ–∫—É–ø–∫–∏ –≤–∞–ª—é—Ç—ã. –ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –æ—Å—É—â–µ—Å—Ç–≤–ª—è—Ç—å –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –≤–∞–ª—é—Ç–æ–π.');
});

bot.on('message', async (ctx) => {
  if (ctx.session.state == 'sell_to_user_price') {
    let price = parseInt(ctx.message.text)
    if (isNaN(price)) {
      ctx.reply('–ù–∞–ø–∏—à–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö')
      return
    }
    ctx.session.sell_price = price
    ctx.session.state = 'sell_to_user_user'
    ctx.reply('–ö–∞–∫–æ–º—É –∏–≥—Ä–æ–∫—É —Ö–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–¥–∞—Ç—å –∏–º—É—â–µ—Å—Ç–≤–æ? –ù–∞–ø–∏—à–∏—Ç–µ id –∏–ª–∏ @–Ω–∏–∫–Ω–µ–π–º')
  }
  else if (ctx.session.state == 'sell_to_user_user') {
    let userid = parseInt(ctx.message.text)
    if (isNaN(userid)) {
      let user = await db.getUserByUsername(ctx.message.text)
      if (!user) {
        ctx.reply('–ù–µ –Ω–∞—à–ª–∏ –Ω–∏–∫–æ–≥–æ —Å —ç—Ç–∏–º –Ω–∏–∫–æ–º üò¢')
        return
      }
      userid = user.tgid
    }
    let seller_user = await db.getUser(ctx.from.id)
    let business = await db.getBusiness(ctx.session.business_id)
    let vars = db.BUSINESS_TYPES[business.type]

    await db.addTrade(seller_user.tgid, userid, ctx.session.sell_price, business.id)
    
    ctx.reply(`–û—Ç–ø—Ä–∞–≤–∏–ª–∏ –∏–≥—Ä–æ–∫—É –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ! –ñ–¥—ë–º –æ—Ç–≤–µ—Ç–∞`)
    bot.telegram.sendMessage(userid, `${seller_user.name} –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤–∞–º –∫—É–ø–∏—Ç—å –∑–∞ ${ctx.session.sell_price}:
–ë–∏–∑–Ω–µ—Å ${vars.friendlyName} üíπ
–°—Ç–∞—Ç—É—Å: ${db.CATEGORIES[vars.category]}
–£—Ä–æ–≤–µ–Ω—å: ${business.upgrades}
–î–æ—Ö–æ–¥–Ω–æ—Å—Ç—å: ${vars.profitPerEmployee * business.employees * vars.equipmentMultiplier[business.upgrades - 1]}
–°–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤: ${business.employees}/${vars.maxEmployeeCount}

–í—ã —Å–æ–≥–ª–∞—Å–Ω—ã?`, Markup.inlineKeyboard([
      [{text:'–î–∞ ‚úî', callback_data:'accept_trade'}, {text: '–ù–µ—Ç ‚ùå', callback_data:'decline_trade'}]
    ]).resize())
  }
  else if (ctx.session.state == 'wait_for_name') {
    ctx.session.state = ''
    const name = ctx.message.text.split(' ')[0]
    await db.register(ctx.from.id, name, 500000)

    await ctx.reply('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', Markup
      .keyboard([
        ['–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å', '–ú–æ–∏ –±–∏–∑–Ω–µ—Å—ã'],
        ['–ß–∞—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤', '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'],
        ['–ü–ª–æ—â–∞–¥–∫–∞ –ø—Ä–æ–¥–∞–∂–∏', '–ö–∞—Ä—Ç–∞ –±–∏–∑–Ω–µ—Å–æ–≤'],
        ['–ü–æ–º–æ—â—å –ø–æ –∏–≥—Ä–µ']
      ])
      .resize()
    );
  }
})

bot.launch();

// Enable graceful stop
process.once('SIGINT', () => bot.stop('SIGINT'));
process.once('SIGTERM', () => bot.stop('SIGTERM'));
